version: 2.1
executors:
  jdk-executor:
    docker:
      - image: circleci/openjdk:14-jdk-buster
    working_directory: ~/otp-generator

  docker-executor:
    docker:
      - image: docker:17.05.0-ce-git
    environment:
      MAVEN_OPTS: -Xmx3200m
    working_directory: ~/otp-generator

  node-executor:
    docker:
      - image: circleci/node:10
    working_directory: ~/otp-generator

jobs:
  dependencies:
    executor: jdk-executor
    steps:
      - checkout
      - restore_cache:
          key: UserApi-{{ checksum "build.gradle.kts" }}-{{ .Branch }}
          keys:
            - UA-{{ checksum "build.gradle.kts" }}

      - run:
          name: Download dependencies
          command: ./gradlew dependencies

      - save_cache:
          key: UserApi-{{ checksum "build.gradle.kts" }}-{{ .Branch }}
          paths: ~/.gradle
          keys:
            - UA-{{ checksum "build.gradle.kts" }}
      - persist_to_workspace:
          root: .
          paths: .

  test:
    executor: jdk-executor
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          key: UserApi-{{ checksum "build.gradle.kts" }}-{{ .Branch }}
          keys:
            - UA-{{ checksum "build.gradle.kts" }}

      - run:
          name: Run linting (Check Kotlin code style)
          command: ./gradlew detekt

      - run:
          name: Run unit tests
          command: ./gradlew test

      - run:
          name: Run test coverage
          command: ./gradlew jacocoTestReport

      - run:
          name: Save test metadata
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*build/test-results/*.xml" -exec cp {} ~/junit/ \;
          when: always

      - store_test_results:
          path: ./build/test-results/

      - store_test_results:
          path: ~/junit

      - store_artifacts:
          path: ./reports/tests/
          destination: test-results

      - store_artifacts:
          path: ./reports/coverage/
          destination: coverage

      - store_artifacts:
          path: ~/junit

      - persist_to_workspace:
          root: .
          paths: .

  build:
    executor: jdk-executor
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          key: UserApi-{{ checksum "build.gradle.kts" }}-{{ .Branch }}
          keys:
            - UA-{{ checksum "build.gradle.kts" }}

      - run:
          name: Build application
          command: ./gradlew app:bootJar

      - run:
          name: Build migrations application
          command: ./gradlew migrations:bootJar

      - run:
          name: Copy build artifacts
          command: ./gradlew copyApplicationBuild

      - store_artifacts:
          path: ./app/build/libs/
          destination: app

      - store_artifacts:
          path: ./core/build/libs/
          destination: app

      - store_artifacts:
          path: ./database/build/libs/
          destination: app

      - store_artifacts:
          path: ./api/build/libs/
          destination: app

      - store_artifacts:
          path: ./migrations/build/libs/
          destination: batchjobs

      - persist_to_workspace:
          root: .
          paths: .

  build_docker_image:
    executor: jdk-executor
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: .

      - run:
          name: Build application Docker image
          command: |
            docker build --build-arg JAR_FILE=app/build/libs/app-0.0.1.jar -t garihublimited/otp-generator:$(echo $CIRCLE_SHA1 | cut -c1-7) .
            docker build --build-arg JAR_FILE=migrations/build/libs/migrations-0.0.1.jar -f Dockerfile.migrations -t garihublimited/otp-generator-migrations:$(echo $CIRCLE_SHA1 | cut -c1-7) .

      - run:
          name: Save application Docker image
          command: |
            docker save -o otp-generator-image.tar garihublimited/otp-generator:$(echo $CIRCLE_SHA1 | cut -c1-7)
            docker save -o otp-generator-migrations-image.tar garihublimited/otp-generator-migrations:$(echo $CIRCLE_SHA1 | cut -c1-7)

      - store_artifacts:
          path: ./otp-generator-image.tar
          destination: otp-generator-image.tar

      - store_artifacts:
          path: ./otp-generator-migrations-image.tar
          destination: otp-generator-migrations-image.tar

      - persist_to_workspace:
          root: .
          paths: .

  push_latest:
    executor: docker-executor
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: .

      - run:
          name: Load application Docker image
          command: |
            docker load --input otp-generator-image.tar
            docker load --input otp-generator-migrations-image.tar
      - run:
          name: Tag docker image
          command: |
            docker tag garihublimited/otp-generator:$(echo $CIRCLE_SHA1 | cut -c1-7) garihublimited/otp-generator:latest
            docker tag garihublimited/otp-generator-migrations:$(echo $CIRCLE_SHA1 | cut -c1-7) garihublimited/otp-generator-migrations:latest
      - run:
          name: Push application Docker image
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push garihublimited/otp-generator:$(echo $CIRCLE_SHA1 | cut -c1-7)
            docker push garihublimited/otp-generator:latest
            docker push garihublimited/otp-generator-migrations:$(echo $CIRCLE_SHA1 | cut -c1-7)
            docker push garihublimited/otp-generator-migrations:latest

  push_alpha:
    executor: docker-executor
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: .

      - run:
          name: Load application Docker image
          command: |
            docker load --input otp-generator-image.tar
            docker load --input otp-generator-migrations-image.tar
      - run:
          name: Tag docker image
          command: |
            docker tag garihublimited/otp-generator:$(echo $CIRCLE_SHA1 | cut -c1-7) garihublimited/otp-generator:alpha
            docker tag garihublimited/otp-generator-migrations:$(echo $CIRCLE_SHA1 | cut -c1-7) garihublimited/otp-generator-migrations:alpha
      - run:
          name: Push application Docker image
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push garihublimited/otp-generator:$(echo $CIRCLE_SHA1 | cut -c1-7)
            docker push garihublimited/otp-generator:alpha
            docker push garihublimited/otp-generator-migrations:$(echo $CIRCLE_SHA1 | cut -c1-7)
            docker push garihublimited/otp-generator-migrations:alpha

  push_beta:
    executor: docker-executor
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: .

      - run:
          name: Load application Docker image
          command: |
            docker load --input otp-generator-image.tar
            docker load --input otp-generator-migrations-image.tar
      - run:
          name: Tag docker image
          command: |
            docker tag garihublimited/otp-generator:$(echo $CIRCLE_SHA1 | cut -c1-7) garihublimited/otp-generator:beta
            docker tag garihublimited/otp-generator-migrations:$(echo $CIRCLE_SHA1 | cut -c1-7) garihublimited/otp-generator-migrations:beta
      - run:
          name: Push application Docker image
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push garihublimited/otp-generator:$(echo $CIRCLE_SHA1 | cut -c1-7)
            docker push garihublimited/otp-generator:beta
            docker push garihublimited/otp-generator-migrations:$(echo $CIRCLE_SHA1 | cut -c1-7)
            docker push garihublimited/otp-generator-migrations:beta

  push_production:
    executor: docker-executor
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: .

      - run:
          name: Load application Docker image
          command: |
            docker load --input otp-generator-image.tar
            docker load --input otp-generator-migrations-image.tar
      - run:
          name: Tag docker image
          command: |
            docker tag garihublimited/otp-generator:$(echo $CIRCLE_SHA1 | cut -c1-7) garihublimited/otp-generator:production
            docker tag garihublimited/otp-generator-migrations:$(echo $CIRCLE_SHA1 | cut -c1-7) garihublimited/otp-generator-migrations:production
      - run:
          name: Push application Docker image
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push garihublimited/otp-generator:$(echo $CIRCLE_SHA1 | cut -c1-7)
            docker push garihublimited/otp-generator:production
            docker push garihublimited/otp-generator-migrations:$(echo $CIRCLE_SHA1 | cut -c1-7)
            docker push garihublimited/otp-generator-migrations:production

  publish_release:
    executor: node-executor
    steps:
      - attach_workspace:
          at: .

      - run:
          name: Publish release
          command: npx semantic-release

workflows:
  version: 2
  test_build_push_tag:
    jobs:
      - dependencies

      - test:
          requires:
            - dependencies

      - build:
          requires:
            - test

      - build_docker_image:
          filters:
            branches:
              only:
                - develop
                - beta
                - alpha
                - production
          requires:
            - build

      - push_latest:
          context: garihub-context
          filters:
            branches:
              only:
                - develop
          requires:
            - build_docker_image

      - push_alpha:
          context: garihub-context
          filters:
            branches:
              only:
                - alpha
          requires:
            - build_docker_image

      - push_beta:
          context: garihub-context
          filters:
            branches:
              only:
                - beta
          requires:
            - build_docker_image

      - push_production:
          context: garihub-context
          filters:
            branches:
              only:
                - production
          requires:
            - build_docker_image

      - publish_release:
          context: garihub-context
          filters:
            branches:
              only:
                - production
                - beta
                - alpha
          requires:
            - push_production